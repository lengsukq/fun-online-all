#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('express-mysql:server');
const http = require('http');// 获取连接实例
const {port} = require('../src/config') // 获取启动参数

/**
 * Get port from environment and store in Express.
 */

// const port = normalizePort(port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const { Server } = require("socket.io");
//  cors: true 跨域允许，不然前端会报跨域错误
let io = new Server(server, { cors: true });


io.on("connect", (socket) => {
    // 加入房间并通知
    socket.on("join", ({ roomId,name }) => {
        console.log(`${name}进入[${roomId}房间]`);
        socket.join(roomId);
        io.in(roomId).emit("say", `${name}加入了[${roomId}房间]`);
    });
    // 离开房间并通知
    socket.on("leave", ({ roomId }) => {
        console.log(roomId, "离开房间");
        socket.leave(roomId);
        io.in(roomId).emit("say", `${socket.id}离开了`);
    });

    // 通过房间号发送消息
    socket.on("sendMsgByRoom", ({ roomId,name, msg }) => {
        console.log(`${name}发送消息到[${roomId}房间]:`, msg);
        io.in(roomId).emit("receiveMsg", socket.id,name,msg);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
    console.log(`express server listen at http://localhost:${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
